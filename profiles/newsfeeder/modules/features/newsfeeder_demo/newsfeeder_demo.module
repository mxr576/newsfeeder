<?php

/**
 * @file
 * Module file for NewsFeeder Demo.
 */

/**
 * Implements hook_menu().
 */
function newsfeeder_demo_menu() {
  $items = [];

  $items['newsfeeder-demo/import-feed-sources'] = [
    'title' => 'Import feed sources',
    'access arguments' => ['administer site'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['newsfeeder_demo_import_feed_sources_form'],
    'type' => MENU_NORMAL_ITEM,
    'menu' => 'navigation',
  ];

  $items['newsfeeder-demo/import-keywords'] = [
    'title' => 'Import keywords',
    'access arguments' => ['administer site'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['newsfeeder_demo_import_keywords_form'],
    'type' => MENU_NORMAL_ITEM,
    'menu' => 'navigation',
  ];
  return $items;
}

/**
 * Custom page callback for newsfeeder-demo/import-feed-sources.
 *
 * @see newsfeeder_demo_menu()
 */
function newsfeeder_demo_import_feed_sources_form($form, &$form_state) {
  $options = [10];
  $options += range(25, 400, 25);
  $options = drupal_map_assoc($options);
  $options['400'] = t('- All -');
  $form['num_of_feed_sources'] = [
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => $options,
    '#title' => t('Maximum number of feed sources to importer'),
    '#description' => t('The list of the demo feed sources file contains ~400 feed sources. How much feed sources do you want to import from them?'),
    '#default_value' => 400,
  ];

  $form['actions'] = [
    '#type' => 'actions',
  ];

  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Import'),
  ];

  return $form;
}

/**
 * Submit handler for newsfeeder_demo_import_feed_sources_form().
 *
 * @see newsfeeder_demo_import_feed_sources_form()
 */
function newsfeeder_demo_import_feed_sources_form_submit($form, &$form_state) {
  $batch = [
    'title' => t('Importing demo feed sources'),
    'operations' => [],
    'progress_message' => t('Processed @current feed sources from @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => '_newsfeeder_demo_import_feed_sources_batch_finished',
  ];
  // Get the demo feed source from the file and add them to the queue for
  // import.
  if ($res = fopen(drupal_get_path('module', 'newsfeeder_demo') . '/demo_feed_sources.csv', 'r')) {
    $imported = 0;
    while (($line = fgetcsv($res)) && $imported < $form_state['values']['num_of_feed_sources']) {
      $batch['operations'][] = [
        '_newsfeeder_demo_import_feed_sources_batch_operation',
        [array_shift($line)],
      ];
      $imported++;
    }
    fclose($res);
  }

  batch_set($batch);
}

/**
 * Custom page callback for newsfeeder-demo/import-keywords.
 *
 * @see newsfeeder_demo_menu()
 */
function newsfeeder_demo_import_keywords_form($form, &$form_state) {
  $form['actions'] = [
    '#type' => 'actions',
  ];

  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Import'),
  ];

  return $form;
}

/**
 * Submit handler for newsfeeder_demo_keywords_sources_form().
 *
 * @see newsfeeder_demo_import_keywords_form()
 */
function newsfeeder_demo_import_keywords_form_submit($form, &$form_state) {
  if ($vocab = taxonomy_vocabulary_machine_name_load('feed_item_keywords')) {
    $batch = [
      'title' => t('Importing demo keywords'),
      'operations' => [],
      'progress_message' => t('Processed @current keywords from @total.'),
      'error_message' => t('An error occurred during processing'),
      'finished' => '_newsfeeder_demo_import_keywords_form_finished',
    ];
    // Get the demo keywords from the file and add them to the queue for
    // import.
    if ($res = fopen(drupal_get_path('module', 'newsfeeder_demo') . '/demo_keywords.csv', 'r')) {
      while ($line = fgetcsv($res)) {
        $batch['operations'][] = [
          '_newsfeeder_demo_import_keywords_form_operation',
          [array_shift($line), $vocab],
        ];
      }
      fclose($res);
    }

    batch_set($batch);
  }
  else {
    drupal_set_message(t('Keywords vocabulary does not exists!'), 'error');
  }
}

/**
 * Batch process callback which import a new the feed source from an url.
 *
 * @param string $url
 *   URL of the feed source.
 * @param array $context
 *   Batch context array.
 *
 * @see newsfeeder_demo_import_feed_sources_form_submit()
 */
function _newsfeeder_demo_import_feed_sources_batch_operation($url, array &$context) {
  if (empty($context['results'])) {
    $context['results']['success'] = [];
    $context['results']['failed'] = [];
    $context['results']['title_error'] = [];
  }
  if (!newsfeeder_hacks_check_if_feed_source_exists_with_url($url)) {
    try {
      // Try to reach the feed source.
      $response = drupal_http_request($url);
      if ($response->code == 200) {
        $values = [
          'type' => 'feed_source',
          'uid' => 0,
          'status' => 1,
          'comment' => 0,
          'promote' => 0,
        ];
        $node = entity_create('node', $values);
        // Set the feed source node's title, if the parsed title looks valid.
        if ($title = _newsfeeder_hacks_get_title_of_feed_source($response->data)) {
          $node->title = $title;
        }
        else {
          $node->title = $url;
          $context['results']['title_error'][] = $url;
        }
        $node->feeds['FeedsHTTPFetcher']['source'] = $url;
        node_save($node);
        if (!$title) {
          watchdog('newsfeeder_demo', 'Feed source title can not be imported! <a href="@url">View</a>', ['@url' => url('node/' . $node->nid)], WATCHDOG_WARNING);
        }
        watchdog('newsfeeder_demo', 'Feed source successfully imported! <a href="@url">View</a>', ['@url' => url('node/' . $node->nid)], WATCHDOG_INFO);
        $context['results']['success'][] = $url;
      }
      // Bad response.
      else {
        $context['results']['failed'][] = $url;
      }
    }
    catch (Exception $e) {
      // Feed source is unreachable on this url.
      watchdog_exception('newsfeeder_demo', $e);
      $context['results']['failed'][] = $url;
    }
  }
}

/**
 * Implements callback_batch_finished().
 *
 * Batch finish callback for feed source import batch.
 *
 * @see newsfeeder_demo_import_feed_sources_form_submit()
 */
function _newsfeeder_demo_import_feed_sources_batch_finished($success, $results, $operations) {
  if ($success) {
    $items = [
      t('imported: @imported', ['@imported' => count($results['success'])]),
      t('failed: @failed', ['@failed' => count($results['failed'])]),
      t('title import failed: @title_import', ['@title_import' => count($results['title_error'])]),
    ];
    drupal_set_message(t('Import process finished successfully! !details', [
      '!details' => theme('item_list', ['items' => $items]),
    ]), 'status');
  }
  else {
    drupal_set_message(t('Import process finished with problems. Check the log for more details!'), 'error');
  }
}

/**
 * Batch process callback which import a new keyword.
 *
 * @param string $keyword
 *   Keyword.
 * @param \stdClass $vocab
 *   Vocabulary object of the Keywords vocabulary.
 * @param array $context
 *   Batch context array.
 *
 * @see newsfeeder_demo_import_keywords_form_submit()
 */
function _newsfeeder_demo_import_keywords_form_operation($keyword, stdClass $vocab, array &$context) {
  if (!_newsfeeder_demo_check_if_term_already_exists($keyword, $vocab)) {
    $data = [
      'name' => $keyword,
      'vid' => $vocab->vid,
    ];
    $term = entity_create('taxonomy_term', $data);
    $wrapper = entity_metadata_wrapper('taxonomy_term', $term);
    try {
      $wrapper->save();
    }
    catch (EntityMetadataWrapperException $e) {
      watchdog_exception('newsfeeder_demo', $e);
    }
  }
}

/**
 * Implements callback_batch_finished().
 *
 * Batch finish callback for keywords import batch.
 *
 * @see newsfeeder_demo_keywords_sources_form_submit()
 */
function _newsfeeder_demo_import_keywords_form_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Import process finished successfully!'), 'status');
  }
  else {
    drupal_set_message(t('Import process finished with problems. Check the log for more details!'), 'error');
  }
}

/**
 * Check, if a term already exists in a vocab by its name.
 *
 * @param string $term_name
 *   Name of the term.
 * @param \stdClass $vocab
 *   Vocabulary object.
 *
 * @return bool
 *   TRUE, if exists, otherwise FALSE.
 */
function _newsfeeder_demo_check_if_term_already_exists($term_name, stdClass $vocab) {
  $tids = db_select('taxonomy_term_data', 'ttd')
    ->fields('ttd', ['tid'])
    ->condition('name', $term_name)
    ->condition('tid', $vocab->vid)
    ->execute()->fetchCol();
  return !empty($tids);
}
