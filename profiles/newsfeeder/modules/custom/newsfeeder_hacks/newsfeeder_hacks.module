<?php

/**
 * @file
 * Module file for NewsFeeder Hacks module.
 */

define('NEWSFEEDER_HACKS_NODE_PROCESSOR_CLASS', 'FeedsNodeProcessor');
define('NEWSFEEDER_HACKS_UNPUBLISHED_DELETE_FEED_IMPORTERS', 'nf_hacks_unpublished_delete_feed_importers');
define('NEWSFEEDER_HACKS_UNPUBLISHED_DELETE_PERIOD', 'nf_hacks_unpublished_delete_period');
define('NEWSFEEDER_HACKS_UNPUBLISHED_DELETE_DEFAULT_PERIOD', '4 0 1 * *');
define('NEWSFEEDER_HACKS_UNPUBLISHED_DELETE_QUEUE', 'newsfeeder_hacks_delete_unpublished_feed_items');

/**
 * Implements hook_menu().
 */
function newsfeeder_hacks_menu() {
  $items = [];

  $items['admin/structure/feeds/newsfeeder-hacks'] = [
    'title' => 'NewsFeeder',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['newsfeeder_hacks_config_form'],
    'access arguments' => ['administer feeds'],
    'file' => 'newsfeeder_hacks.ui.inc',
    'type' => MENU_LOCAL_ACTION,
  ];
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function newsfeeder_hacks_menu_alter(&$items) {
  // Disable /node path.
  $items['node']['page callback'] = 'drupal_not_found';
}

/**
 * Implements hook_feed_enhancer_plugins().
 */
function newsfeeder_hacks_feed_enhancer_plugins() {
  $plugins = [];
  if (module_exists('node')) {
    $plugins['feed_item_enhancer_plugin_publish_if_content_language'] = [
      'name' => t('Publish content, if its language is'),
      'description' => t('This enhancer should run after the Stanbol Enhancer, when the imported Feed items were created unpublished by default. With this enhancer you can publish a feed item if it has a specific language.'),
      'class' => 'PublishIfContentLanguageFeedItemEnhancerPlugin',
      'weight' => -10,
    ];
  }

  return $plugins;
}

/**
 * Return the term's names with the given term ids.
 *
 * @param array $tids
 *   Array of taxonomy term ids.
 *
 * @return array
 *   An associative array, where the keys are the term ids and the values are
 *   the (translated) names of the terms.
 */
function newsfeeder_hacks_get_name_of_the_taxonomy_terms(array $tids) {
  $query = db_select('taxonomy_term_data', 'ttd')
    ->fields('ttd', ['tid', 'name'])
    ->condition('tid', $tids, 'IN');
  $query->addTag('translatable');
  return $query->execute()->fetchAllKeyed();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function newsfeeder_hacks_form_alter(&$form, &$form_state, $form_id) {
  // Alter the Feed source nodes.
  if (isset($form['#node_edit_form']) && isset($form['feeds'])) {
    $form['feeds']['#type'] = 'container';
    $form['feeds']['FeedsHTTPFetcher']['auto_node_title'] = [
      '#type' => 'checkbox',
      '#title' => t('Set the Title automatically'),
      '#default_value' => TRUE,
    ];
    $form['title']['#states'] = [
      'visible' => [
        ':input[name="feeds[FeedsHTTPFetcher][auto_node_title]"]' => ['checked' => FALSE],
      ],
    ];
    if ($form['title']['#required']) {
      $form['title']['#required'] = FALSE;
      $form['title']['#states']['required'] = [
        ':input[name="feeds[FeedsHTTPFetcher][auto_node_title]"]' => ['checked' => FALSE],
      ];
    }
    $form['actions']['submit']['#validate'] = array_merge(['newsfeeder_hacks_feed_source_node_form_validate'], $form['#submit']);
    if (isset($form['actions']['preview'])) {
      $form['actions']['preview']['#validate'] = array_merge(['newsfeeder_hacks_feed_source_node_form_validate'], $form['#submit']);
    }
  }
}

/**
 * Custom validation handler for feed source nodes.
 */
function newsfeeder_hacks_feed_source_node_form_validate($form, &$form_state) {
  if ($form_state['values']['feeds']['FeedsHTTPFetcher']['auto_node_title'] && !empty($form_state['values']['feeds']['FeedsHTTPFetcher']['source'])) {
    // Try to set the Title of the node automatically.
    $response = drupal_http_request($form_state['values']['feeds']['FeedsHTTPFetcher']['source']);
    if ($response->code == 200) {
      if ($title = _newsfeeder_hacks_get_title_of_feed_source($response->data)) {
        $form_state['values']['title'] = $title;
      }
      else {
        form_error($form['title'], t('Form title can not be set automatically, please set it manually!'));
      }
    }
    else {
      form_error($form['feeds']['FeedsHTTPFetcher']['source'], t('Feed not found, please check the URL again!'));
    }
  }
}

/**
 * Helper function which checks, whether a feeds source exists in the system.
 *
 * @param string $url
 *   URL of the feed source.
 *
 * @return int|bool
 *   ID of the feed source node, if exists, else FALSE.
 */
function newsfeeder_hacks_check_if_feed_source_exists_with_url($url) {
  return db_select('feeds_source', 'fs')
    ->condition('source', $url)
    ->fields('fs', ['feed_nid'])
    ->execute()
    ->fetchField();
}

/**
 * Helper function which returns Feeds importers with Node processors.
 *
 * @return array
 *   An array of the Feeds importer entities, keyed by the machine name of the
 *   feeds importer.
 */
function newsfeeder_hacks_get_feed_importers_with_node_processors() {
  $importers = feeds_importer_load_all();
  return array_filter($importers, function ($importer) {
    $config = $importer->getConfig();
    return isset($config['processor']['plugin_key']) && $config['processor']['plugin_key'] == NEWSFEEDER_HACKS_NODE_PROCESSOR_CLASS;
  });
}

/**
 * Implements hook_cronapi().
 */
function newsfeeder_hacks_cronapi($op, $job = NULL) {
  // Remove expired queue items every 2:00am.
  $items['newsfeeder_hacks_remove_expired_queue_items_cron'] = [
    'description' => t('Remove expired queue items. Expired means here: tries == max_tries, where max_tries != 0.'),
    'rule' => '* 2 * * *',
  ];
  $items['newsfeeder_hacks_delete_unpublished_feed_items_cron'] = [
    'description' => t('Delete unpublished feed items of the <a href="@url">selected feeds importers</a>.', ['@url' => url('admin/structure/feeds/newsfeeder-hacks')]),
    'rule' => variable_get(NEWSFEEDER_HACKS_UNPUBLISHED_DELETE_PERIOD, NEWSFEEDER_HACKS_UNPUBLISHED_DELETE_DEFAULT_PERIOD),
  ];
  // Cleaner should be run every night between 00:00 and 06:00 in every five
  // minutes.
  $items['newsfeeder_hacks_remove_deleted_term_references_from_feed_items_cron'] = [
    'description' => t("Remove deleted terms from feed items' taxonomy term reference fields."),
    'rule' => '*/5 0,6,5,4,3,2,1 * * *',
  ];
  return $items;
}

/**
 * Cron worker which removes the deleted term references from the feed items.
 *
 * @see newsfeeder_hacks_cronapi()
 */
function newsfeeder_hacks_remove_deleted_term_references_from_feed_items_cron() {
  // Gather the fields which contains the deleted terms and they have to be
  // updated.
  $affected_fields = db_select('feeds_item_deleted_terms', 'fidt')
    ->fields('fidt', ['field_name'])
    ->groupBy('field_name')
    ->execute()
    ->fetchCol();

  if (!empty($affected_fields)) {
    array_walk($affected_fields, function ($field) {
      // Deleted terms from field.
      $tids = db_select('feeds_item_deleted_terms', 'fidt')
        ->condition('field_name', $field)
        ->fields('fidt', ['tid'])
        ->execute()
        ->fetchCol();
      $nids = newsfeeder_hacks_get_nodes_where_these_terms_referenced_in_this_field($field, $tids, 10);
      if (!empty($nids)) {
        array_walk($nids, function ($nid) use ($tids, $field) {
          try {
            $emw = entity_metadata_wrapper('node', $nid);
            $values = $emw->{$field}->raw();
            // Remove the terms from the term reference field values.
            $values = array_diff($values, $tids);
            $emw->{$field} = $values;
            $emw->save();
          }
          catch (Exception $e) {
            watchdog_exception('newsfeeder_hacks', $e);
          }
        });
      }
      else {
        try {
          db_delete('feeds_item_deleted_terms')
            ->condition('field_name', $field)
            ->execute();
        }
        catch (Exception $e) {
          watchdog_exception('newsfeeder_hacks', $e);
        }
      }
    });
  }
}

/**
 * Track the deleted term references from the feed (node) item fields.
 *
 * @param \stdClass $term
 *   Term object.
 */
function newsfeeder_hacks_track_deleted_term_references_from_feed_item_fields(stdClass $term) {
  // First check, if this term's vocabulary in use on any term. reference
  // field of any feed node.
  $feed_node_bundles = newsfeeder_hacks_get_node_bundles_from_feed_importer_with_node_processor();
  array_walk($feed_node_bundles, function ($bundle) use ($term) {
    $term_fields = newsfeeder_hacks_get_taxonomy_fields_of_node_bundle($bundle);
    if (!empty($term_fields)) {
      $fields_by_vocab = newsfeeder_hack_match_taxonomy_term_reference_fields_with_their_vocabularies($term_fields);
      if (!empty($fields_by_vocab[$term->vocabulary_machine_name])) {
        foreach ($fields_by_vocab[$term->vocabulary_machine_name] as $field) {
          // Store a log entry about which term is removed and which fields
          // are affected with its removal.
          try {
            db_insert('feeds_item_deleted_terms')->fields([
              'field_name' => $field,
              'tid' => $term->tid,
              'created' => time(),
            ])->execute();
            drupal_set_message(t('The %term term will be removed from the referenced feed items in background.', ['%term' => $term->name]));
          }
          catch (Exception $e) {
            watchdog_exception('newsfeeder_hack_term_reference_delete', $e);
            // Throw the exception again to prevent taxonomy term removal.
            throw $e;
          }
        }
      }
    }
  });
}

/**
 * Cron worker, which removes the expired queue items.
 *
 * Expired here means that the number of tries (failures) equals the maximum
 * number of tries.
 *
 * @see newsfeeder_hacks_cronapi()
 */
function newsfeeder_hacks_remove_expired_queue_items_cron() {
  db_delete('queue')
    ->condition('expire', 0)
    ->condition('max_tries', 0, '<>')
    ->where('tries = max_tries')
    ->execute();
}

/**
 * Cron worker which collects the unpublished feed items.
 *
 * @see newsfeeder_hacks_cronapi()
 */
function newsfeeder_hacks_delete_unpublished_feed_items_cron() {
  $feed_importers = variable_get(NEWSFEEDER_HACKS_UNPUBLISHED_DELETE_FEED_IMPORTERS, []);
  // Check, if any Feeds importer selected on the configuration UI.
  if (!empty($feed_importers)) {
    $queue = DrupalQueue::get(NEWSFEEDER_HACKS_UNPUBLISHED_DELETE_QUEUE);
    array_walk($feed_importers, function ($importer) use ($queue) {
      // Get all unpublished feed items of the feed importer.
      $feed_items = newsfeeder_hacks_get_unpublished_feed_items_of_the_feed_importer($importer);
      if (!empty($feed_items)) {
        $nids = array_keys($feed_items);
        $chunks = array_chunk($nids, 10);
        array_walk($chunks, function ($chunk) use ($queue) {
          $queue->createItem($chunk);
        });
      }
    });
  }
}

/**
 * Get all feed items which were imported by the given Feeds importer.
 *
 * @param string $importer
 *   Machine name of the Feeds importer.
 *
 * @return array
 *   An associative array of feed items, keyed by the entity ids.
 */
function newsfeeder_hacks_get_feed_items_of_the_feed_importer($importer) {
  return db_select('feeds_item', 'fi')
    ->fields('fi')
    ->condition('id', $importer)
    ->execute()
    ->fetchAllAssoc('entity_id');
}

/**
 * Get all unpublished feed items which were imported this Feeds importer.
 *
 * @param string $importer
 *   Machine name of the Feeds importer.
 *
 * @return array
 *   An associative array of feed items, keyed by the entity ids.
 */
function newsfeeder_hacks_get_unpublished_feed_items_of_the_feed_importer($importer) {
  $query = db_select('feeds_item', 'fi');
  $query->join('node', 'n', 'fi.entity_id=n.nid');
  $query->fields('fi')
    ->condition('id', $importer)
    ->condition('n.status', NODE_NOT_PUBLISHED);
  return $query->execute()
    ->fetchAllAssoc('entity_id');
}

/**
 * Implements hook_cron_queue_info_alter().
 */
function newsfeeder_hacks_cron_queue_info_alter(&$queues) {
  // Do not run feeds_source_import queue with cron, it should be executed
  // with Jenkins periodically.
  $queues['feeds_source_import']['skip on cron'] = TRUE;
}

/**
 * Implements hook_cron_queue_info().
 */
function newsfeeder_hacks_cron_queue_info() {
  $queues = [];
  $queues[NEWSFEEDER_HACKS_UNPUBLISHED_DELETE_QUEUE] = [
    'worker callback' => '_newsfeeder_hacks_delete_unpublished_feed_items_queue_worker',
    'time' => 30,
    'skip on cron' => TRUE,
  ];
  return $queues;
}

/**
 * Queue worker callback, which deletes the feed nodes with the given ids.
 *
 * @param array $nids
 *   Array of node ids of the feed item nodes.
 *
 * @see newsfeeder_hacks_cron_queue_info()
 */
function _newsfeeder_hacks_delete_unpublished_feed_items_queue_worker(array $nids) {
  node_delete_multiple($nids);
}

/**
 * Helper function which extracts the title of the feeds source.
 *
 * @param string $body
 *   XML body of the feed source.
 *
 * @return bool|string
 *   The title of the feed source, or FALSE.
 */
function _newsfeeder_hacks_get_title_of_feed_source($body) {
  if (!empty($body)) {
    $doc = new DOMDocument();
    if ($doc->loadXML($body, LIBXML_NOCDATA | LIBXML_NOWARNING | LIBXML_NOERROR)) {
      $xml = new DOMXPath($doc);
      // Try to parse the body as a simple RSS feed.
      $items = $xml->evaluate('//rss/channel/title');
      if ($items->length !== 0) {
        return $items->item(0)->nodeValue;
      }
      // Register additional namespaces for RDF feeds.
      $xml->registerNamespace('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
      $xml->registerNamespace('dc', 'http://purl.org/dc/elements/1.1/');
      $xml->registerNamespace('rss', 'http://purl.org/rss/1.0/');
      $items = $xml->evaluate('//rdf:RDF/rss:channel/rss:title');
      if ($items->length !== 0) {
        return $items->item(0)->nodeValue;
      }
      // Register additional namespaces for ATOM feeds.
      $xml->registerNamespace('atom', 'http://www.w3.org/2005/Atom');
      $items = $xml->evaluate('//atom:feed/atom:title');
      if ($items->length !== 0) {
        return $items->item(0)->nodeValue;
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function newsfeeder_hacks_taxonomy_term_delete($term) {
  newsfeeder_hacks_track_deleted_term_references_from_feed_item_fields($term);
}

/**
 * Return the attached node bundles from Feed importers with node processors.
 */
function newsfeeder_hacks_get_node_bundles_from_feed_importer_with_node_processor() {
  $attached_node_bundles = &drupal_static(__FUNCTION__, []);
  if (empty($attached_node_bundles)) {
    $node_importers = newsfeeder_hacks_get_feed_importers_with_node_processors();
    array_walk($node_importers, function ($importer) use (&$attached_node_bundles) {
      $config = $importer->getConfig();
      $attached_node_bundles[] = $config['processor']['config']['bundle'];
    });
  }

  return $attached_node_bundles;
}

/**
 * Get taxonomy term reference fields of a node bundle.
 *
 * @param string $bundle
 *   Node bundle.
 *
 * @return array
 *   Array of taxonomy term reference fields.
 */
function newsfeeder_hacks_get_taxonomy_fields_of_node_bundle($bundle) {
  $term_fields = &drupal_static(__FUNCTION__ . '_' . $bundle, FALSE);
  if ($term_fields === FALSE) {
    $term_fields = [];
    $node_properties = entity_get_property_info('node');
    if (!empty($node_properties['bundles'][$bundle]['properties'])) {
      $term_fields = array_filter($node_properties['bundles'][$bundle]['properties'], function ($field) {
        return $field['type'] == 'list<taxonomy_term>';
      });
      $term_fields = array_keys($term_fields);
    }
  }

  return $term_fields;
}

/**
 * Returns the taxonomy term reference fields grouped by their vocabularies.
 *
 * @param array $fields
 *   Array of field machine names.
 *
 * @return array
 *   An associative array, where the keys are the vocabulary machine names
 *   and the values are the field machine names, which belongs to
 *   each vocabulary.
 */
function newsfeeder_hack_match_taxonomy_term_reference_fields_with_their_vocabularies(array $fields) {
  $fields_grouped_by_vocabs = [];

  array_walk($fields, function ($field_name) use (&$fields_grouped_by_vocabs) {
    $field_info = field_info_field($field_name);
    if (!empty($field_info['settings']['allowed_values'][0]['vocabulary'])) {
      $fields_grouped_by_vocabs[$field_info['settings']['allowed_values'][0]['vocabulary']][] = $field_name;
    }
  });

  return $fields_grouped_by_vocabs;
}

/**
 * Return those nodes which contains references to this terms in this field.
 *
 * @param string $field
 *   Name of the field.
 * @param array $tids
 *   Array of taxonomy term ids.
 * @param int $limit
 *   Number of items to return.
 *
 * @return array
 *   Array of node ids.
 */
function newsfeeder_hacks_get_nodes_where_these_terms_referenced_in_this_field($field, array $tids, $limit = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->fieldCondition($field, 'tid', $tids, 'IN');
  if (isset($limit)) {
    $query->range(0, $limit);
  }
  $result = $query->execute();
  if (!empty($result['node'])) {
    return array_keys($result['node']);
  }
  return [];
}

/**
 * Implements hook_views_query_alter().
 *
 * Temporary fix for the date granularity issue of the queries.
 *
 * The main problem is the queries which contains date intervals could be
 * demonstrated easily.
 * Let's assume that the user would like list those nodes which
 * created between today, for example 2015.01.01. The achieve this the user
 * will set the date filter's From and To values to 2015.01.01.
 * These filters set to be inclusive ("Greater than or equal" and "Less than
 * equal") in the search view's settings, so the user is expect that when
 * the query executed, then the results will contains those nodes which
 * created between 2015.01.01 00:00 and 2015.01.01 23:59, but this is not
 * true! The query will contains the nodes between 00:00 and 00:00.
 *
 * The reason of this problem is that the date interval granularity is day
 * instead of second, so with this temporary fix, it could be solved that
 * the upper limit's granularity could be second, in other words, it contains
 * the 23:59:59 in those cases ONLY, when the date field is the node's
 * created date.
 */
function newsfeeder_hacks_views_query_alter(&$view, &$query) {
  foreach ($query->where[1]['conditions'] as &$cond) {
    if (is_string($cond['field']) && strpos($cond['field'], 'node.created <=') !== FALSE) {
      list($field, $op, $value) = explode(' ', $cond['field']);
      $cond['field'] = $field . ' ' . $op . ' ' . (strtotime('+1 day', $value) - 1);
    }
  }
}

/**
 * Implements hook_feeds_presave().
 *
 * Make sure that non-printable UTF8 characters will not cause database issue
 * meanwhile the import. Also cut down the imported title's length to 255
 * characters, which is the maximum of the default title field.
 */
function newsfeeder_hacks_feeds_presave(FeedsSource $source, $entity, $item, $entity_id) {
  $importer_config = $source->importer()->getConfig();
  if (isset($importer_config['processor']['plugin_key']) && $importer_config['processor']['plugin_key'] == 'FeedsNodeProcessor') {
    $title_mapped_to = &drupal_static(__FUNCTION__ . '_' . $source->importer()->id . '_title', FALSE);
    $description_mapped_to = &drupal_static(__FUNCTION__ . '_' . $source->importer()->id . '_description', FALSE);
    // It is not possible that only one of them is set, but lets make sure
    // about that both variable is set properly after this if processed.
    // The main reason of this merged condition is to make sure that we
    // loop through the mappings array only one time.
    if (!$description_mapped_to || !$title_mapped_to) {
      foreach ($importer_config['processor']['config']['mappings'] as $key => $values) {
        switch ($values['source']) {
          case 'description':
            $description_mapped_to = $values['target'];
            break;

          case 'title':
            $title_mapped_to = $values['target'];
            break;
        }
        if ($title_mapped_to && $description_mapped_to) {
          break;
        }
      }
    }
    if ($title_mapped_to || $description_mapped_to) {
      $wrapper = entity_metadata_wrapper('node', $entity);
      $properties = $wrapper->getPropertyInfo();
      if ($title_mapped_to) {
        if (!isset($properties[$title_mapped_to]['type'])) {
          $wrapper->{$title_mapped_to} = substr(newsfeeder_hacks_clean_non_printable_utf_characters_from_string($wrapper->{$title_mapped_to}->value()), 0, 255);
        }
        elseif ($properties[$title_mapped_to]['type'] == 'text_formatted') {
          $wrapper->{$title_mapped_to}->value = newsfeeder_hacks_clean_non_printable_utf_characters_from_string($wrapper->{$title_mapped_to}->value->value());
        }
        else {
          watchdog('newsfeeder_hacks', 'Unknown/Unhandled field type: %type.', ['%type' => $properties[$title_mapped_to]['type']], WATCHDOG_WARNING);
        }
      }
      if ($description_mapped_to) {
        switch ($properties[$description_mapped_to]['type']) {
          case 'text_formatted':
            if (!empty($wrapper->{$description_mapped_to}->value())) {
              $wrapper->{$description_mapped_to}->value = newsfeeder_hacks_clean_non_printable_utf_characters_from_string($wrapper->{$description_mapped_to}->value->value());
            }
            break;

          default:
            if (!empty($wrapper->{$description_mapped_to}->value())) {
              $wrapper->{$description_mapped_to} = newsfeeder_hacks_clean_non_printable_utf_characters_from_string($wrapper->{$description_mapped_to}->value());
            }
        }
      }
    }
  }
}

/**
 * Helper function which removes all non-printable UTF8 characters.
 *
 * This is a necessary step to prevent database errors when a new feed item
 * created or an existing one is saved.
 *
 * @param string $string
 *   String, which needs to be cleaned.
 *
 * @return string
 *   The cleaned string.
 */
function newsfeeder_hacks_clean_non_printable_utf_characters_from_string($string) {
  // Remove all non-printable characters from the string, which could
  // cause DB error on entity save.
  // This regexp is originally found in the Portable UTF8 library,
  // I've just borrowed it, because I did not need the whole library.
  // https://github.com/voku/portable-utf8/
  // https://github.com/voku/portable-utf8/blob/master/src/voku/helper/UTF8.php
  // @see clean()
  $regxp = '/
               (
                (?: [\x00-\x7F]                  # single-byte sequences   0xxxxxxx
                |   [\xC2-\xDF][\x80-\xBF]       # double-byte sequences   110xxxxx 10xxxxxx
                |   \xE0[\xA0-\xBF][\x80-\xBF]   # triple-byte sequences   1110xxxx 10xxxxxx * 2
                |   [\xE1-\xEC][\x80-\xBF]{2}
                |   \xED[\x80-\x9F][\x80-\xBF]
                |   [\xEE-\xEF][\x80-\xBF]{2}
                ){1,50}                          # ...one or more times
               )
               | .                                  # anything else
               /x';
  return preg_replace($regxp, '$1', $string);
}
